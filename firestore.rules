rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isGroupMember(groupId) {
      return isAuthenticated() && (
        // EITHER: legacy subcollection membership
        exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)) ||
        // OR: membership stored as an array field on the group document
        (get(/databases/$(database)/documents/groups/$(groupId)).data.members != null &&
          request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.members)
      );
    }
    
    match /users/{userId} {
      // Allow authenticated users to read basic user profiles
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Username reservations mapping: usernames/{handle} -> { uid }
    match /usernames/{handle} {
      allow read: if true; // public availability checks
      allow create: if isAuthenticated() && request.resource.data.uid == request.auth.uid &&
        (!exists(/databases/$(database)/documents/usernames/$(handle)) ||
          // allow idempotent re-create/merge by same owner
          (get(/databases/$(database)/documents/usernames/$(handle)).data.uid == request.auth.uid));
      allow update, delete: if isAuthenticated() && resource.data.uid == request.auth.uid;
    }
    
    match /groups/{groupId} {
      // DEV: allow any authenticated user to read groups
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      // allow users to join/leave by updating members array
      allow update: if isAuthenticated() && (
        // join: add caller to members
        (
          !(request.auth.uid in resource.data.members) &&
          request.resource.data.members.size() == resource.data.members.size() + 1 &&
          request.auth.uid in request.resource.data.members
        ) ||
        // leave: remove caller from members
        (
          (request.auth.uid in resource.data.members) &&
          request.resource.data.members.size() == resource.data.members.size() - 1 &&
          !(request.auth.uid in request.resource.data.members)
        )
      );
      // keep delete restricted to members
      allow delete: if isAuthenticated() && isGroupMember(groupId);
      
      match /members/{memberId} {
        allow read, write: if isAuthenticated() && isGroupMember(groupId);
      }
      
      match /messages/{messageId} {
        allow read: if isAuthenticated() && isGroupMember(groupId);
        allow create: if isAuthenticated() && isGroupMember(groupId);
        allow update, delete: if isAuthenticated() && isGroupMember(groupId) && 
          resource.data.senderId == request.auth.uid;
      }
    }

    // Direct chats between users
    match /chats/{chatId} {
      // Members array: ['uidA','uidB']
      allow read: if isAuthenticated() && request.auth.uid in resource.data.members;
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.members;
      allow update, delete: if isAuthenticated() && request.auth.uid in resource.data.members;

      match /messages/{messageId} {
        allow read, create: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
      }
    }
    
    match /posts/{postId} {
      // Read rules based on per-post visibility
      function isOwner() {
        return isAuthenticated() && request.auth.uid == resource.data.authorId;
      }
      function isPublic() {
        return resource.data.visibility == 'public' || !('visibility' in resource.data);
      }
      // NOTE: Follower-based reads require a followers graph. Until that exists,
      // we restrict 'followers' to owner only (safe default). Client will also filter.
      function isFollowersAllowed() {
        return false; // TODO: enable when followers graph is available
      }

      allow read: if isPublic() || isOwner() || isFollowersAllowed();
      allow create: if isAuthenticated() && 
        request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isAuthenticated() && 
        resource.data.authorId == request.auth.uid;

      // Post likes subcollection
      match /likes/{uid} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && request.auth.uid == uid;
        allow delete: if isAuthenticated() && request.auth.uid == uid;
      }

      // Post comments and replies
      match /comments/{commentId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated();
        allow update, delete: if isAuthenticated() && resource.data.authorId == request.auth.uid;
      }
    }
    
    match /polls/{pollId} {
      allow read: if isAuthenticated();
      // Allow authenticated users to create polls they own
      allow create: if isAuthenticated() && request.resource.data.createdBy == request.auth.uid;
      // Allow updates for voting or creator maintenance
      allow update: if isAuthenticated() && (
        // Voting: only options and totalVotes change
        (
          request.resource.data.diff(resource.data).changedKeys().hasOnly(['options','totalVotes'])
        ) ||
        // Creator may change status/expiresAt
        (
          resource.data.createdBy == request.auth.uid &&
          request.resource.data.diff(resource.data).changedKeys().subset(['status','expiresAt','title','description'])
        )
      );
      allow delete: if isAuthenticated() && 
        resource.data.createdBy == request.auth.uid;
    }

    // Activities collection for RSVP and Activity Mode
    match /activities/{activityId} {
      allow read: if isAuthenticated();
      // Only creator can create a planned activity
      allow create: if isAuthenticated() && request.resource.data.creatorId == request.auth.uid;

      // Allow RSVP and status transitions
      allow update: if isAuthenticated() && (
        // RSVP join: participants grows by exactly one and includes caller
        (
          request.resource.data.diff(resource.data).changedKeys().hasOnly(['participants']) &&
          request.resource.data.participants.size() == resource.data.participants.size() + 1 &&
          request.auth.uid in request.resource.data.participants
        ) ||
        // RSVP leave: participants shrinks by exactly one and previously included caller
        (
          request.resource.data.diff(resource.data).changedKeys().hasOnly(['participants']) &&
          request.resource.data.participants.size() == resource.data.participants.size() - 1 &&
          !(request.auth.uid in request.resource.data.participants) &&
          (request.auth.uid in resource.data.participants)
        ) ||
        // Status change to active/completed by creator or participant
        (
          request.resource.data.diff(resource.data).changedKeys().hasOnly(['status']) &&
          (request.auth.uid == resource.data.creatorId || request.auth.uid in resource.data.participants) &&
          (request.resource.data.status in ['active', 'completed'])
        )
      );

      allow delete: if isAuthenticated() && request.auth.uid == resource.data.creatorId;
    }
    
    match /activitySuggestions/{suggestionId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
    }
    
    match /voteHistory/{voteId} {
      allow read, write: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
    }

    // AI voting history for activity suggestions (client writes)
    match /ai_vote_history/{voteId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
    }

    // Requests (invites/joins)
    match /requests/{requestId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated();
    }

    // User connections (two-party relationships)
    match /connections/{connectionId} {
      // Each doc should have `members: [uidA, uidB]`
      allow read: if isAuthenticated() && request.auth.uid in resource.data.members;
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.members;
      allow update, delete: if isAuthenticated() && request.auth.uid in resource.data.members;
    }
  }
}
