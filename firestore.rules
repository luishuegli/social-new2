rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isGroupMember(groupId) {
      return isAuthenticated() && (
        // EITHER: legacy subcollection membership
        exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)) ||
        // OR: membership stored as an array field on the group document
        (get(/databases/$(database)/documents/groups/$(groupId)).data.members != null &&
          request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.members)
      );
    }
    
    match /users/{userId} {
      // Allow authenticated users to read basic user profiles
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }
    
    match /groups/{groupId} {
      // DEV: allow any authenticated user to read groups
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      // DEV: allow a user to add themselves to the members array
      allow update: if isAuthenticated() &&
        (request.resource.data.members != null && request.auth.uid in request.resource.data.members);
      // keep delete restricted to members
      allow delete: if isAuthenticated() && isGroupMember(groupId);
      
      match /members/{memberId} {
        allow read, write: if isAuthenticated() && isGroupMember(groupId);
      }
      
      match /messages/{messageId} {
        allow read: if isAuthenticated() && isGroupMember(groupId);
        allow create: if isAuthenticated() && isGroupMember(groupId);
        allow update, delete: if isAuthenticated() && isGroupMember(groupId) && 
          resource.data.senderId == request.auth.uid;
      }
    }

    // Direct chats between users
    match /chats/{chatId} {
      // Members array: ['uidA','uidB']
      allow read: if isAuthenticated() && request.auth.uid in resource.data.members;
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.members;
      allow update, delete: if isAuthenticated() && request.auth.uid in resource.data.members;

      match /messages/{messageId} {
        allow read, create: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
      }
    }
    
    match /posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isAuthenticated() && 
        resource.data.authorId == request.auth.uid;

      // Post likes subcollection
      match /likes/{uid} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && request.auth.uid == uid;
        allow delete: if isAuthenticated() && request.auth.uid == uid;
      }

      // Post comments and replies
      match /comments/{commentId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated();
        allow update, delete: if isAuthenticated() && resource.data.authorId == request.auth.uid;
      }
    }
    
    match /polls/{pollId} {
      allow read: if isAuthenticated();
      // Allow group members to create/update polls
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated() && 
        resource.data.createdBy == request.auth.uid;
    }
    
    match /activitySuggestions/{suggestionId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
    }
    
    match /voteHistory/{voteId} {
      allow read, write: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
    }

    // Requests (invites/joins)
    match /requests/{requestId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated();
    }
  }
}
