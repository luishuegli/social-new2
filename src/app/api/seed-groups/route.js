import { NextResponse } from 'next/server';
import { adminDb, FieldValue } from '../../Lib/firebaseAdmin';

// Lightweight group seeder (keeps logic simple to avoid bundler issues)
export async function POST(request) {
  try {
    const body = await request.json().catch(() => ({}));
    const count = Math.max(3, Math.min(20, Number(body?.count) || 8));

    // Pull up to 200 users to sample from
    const usersSnap = await adminDb.collection('users').limit(200).get();
    if (usersSnap.empty) {
      return NextResponse.json({ ok: false, error: 'No users found. Run /api/seed-users first.' }, { status: 400 });
    }
    const users = usersSnap.docs.map((d) => ({ id: d.id, ...(d.data() || {}) }));

    const names = [
      'Tech Enthusiasts', 'City Explorers', 'Cooking Masters', 'Book Lovers',
      'Photography Club', 'Board Game Nights', 'Fitness Warriors', 'Mountain Adventurers',
      'Film Buffs', 'Creative Writers'
    ];

    const groupsCol = adminDb.collection('groups');
    const created = [];

    function rand(n) { return Math.floor(Math.random() * n); }
    function takeMembers(target) {
      const size = 10 + rand(10);
      const ids = new Set();
      while (ids.size < size) ids.add(users[rand(users.length)].id);
      return Array.from(ids);
    }

    for (let i = 0; i < count; i += 1) {
      const ref = groupsCol.doc();
      const members = takeMembers();
      const name = `${names[i % names.length]} ${i + 1}`;
      const nextActivityId = `activity-${i + 1}`;
      await ref.set({
        groupName: name,
        description: 'Autogenerated group for seeding end-to-end flows.',
        members,
        createdAt: FieldValue.serverTimestamp(),
        category: 'General',
        nextActivity: {
          id: nextActivityId,
          title: 'Upcoming Meetup',
          date: new Date(Date.now() + (2 + rand(10)) * 24 * 60 * 60 * 1000),
          location: 'City Center',
          type: 'event',
          joined: false,
        },
        latestActivity: {
          type: 'message',
          author: { name: 'System', avatarUrl: '' },
          content: 'Welcome to the group! This is an autogenerated latest update.',
          timestamp: FieldValue.serverTimestamp(),
        },
      });
      created.push({ id: ref.id, groupName: name, members: members.length });
    }

    return NextResponse.json({ ok: true, createdCount: created.length, created });
  } catch (error) {
    console.error('seed-groups failed:', error);
    return NextResponse.json({ ok: false, error: error.message }, { status: 500 });
  }
}

export async function GET() {
  const req = new Request('http://local/seed-groups', { method: 'POST', body: JSON.stringify({}) });
  return POST(req);
}


